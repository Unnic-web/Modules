import io
import asyncio
from telethon import TelegramClient
from telethon.tl.custom import Message
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import ChannelParticipantsAdmins
from .. import loader, utils

@loader.tds
class –ë—ã–ªMod(loader.Module):
    """–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≥—Ä—É–ø–ø"""

    strings = {
        "name": "–ë—ã–ª",
        "author": "@HikkTutor"
    }

    def init(self):
        self.name = self.strings["name"]
        self._me = None
        self._ratelimit = []

    async def client_ready(self, client: TelegramClient, db):
        self._db = db
        self._client = client
        await client(JoinChannelRequest(channel=self.strings["author"]))

    async def –ª–æ–≥cmd(self, message: Message):
        """–ü—Ä–µ–∂–¥–µ —á–µ–º, –ø—Ä–æ—á—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
        if not message.chat:
            await message.edit("<b>–û—à–∏–±–∫–∞!</b>")
            return
        chat = message.chat

        f = io.BytesIO()
        f.name = f"Dump by {chat.id}.csv"
        f.write("FNAME;LNAME;USER;ID;NUMBER\n".encode())
        me = await message.client.get_me()
        participants = await message.client.get_participants(message.to_id)
        
        for i in participants:
            if i.id == me.id:
                continue
            f.write(
                f"{str(i.first_name) or ''};{str(i.last_name) or ''};{str(i.username) or ''};{str(i.id)};{str(i.phone) or ''}\n".encode()
            )
        f.seek(0)
        await message.client.send_file("me", f, caption=f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞: {chat.id}")

        await message.edit("<b>–°–¥–µ–ª–∞–ª —Ç–æ —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª, –ª–æ–≥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.</b>")
        f.close()

    async def –∏cmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        args = utils.get_args_raw(message)

        if message.is_reply:
            reply_message = await message.get_reply_message()
            user = await message.client.get_entity(reply_message.sender_id)
        elif args:
            try:
                user = await message.client.get_entity(args)
            except Exception:
                await message.edit("<b>–û—à–∏–±–∫–∞</b>")
                return
        else:
            user = await message.get_sender()

        user_initials = f"{user.first_name} {user.last_name}" if user.first_name and user.last_name else user.first_name
        user_id = user.id
        await message.edit(f'<emoji document_id=5972282179776940830>‚úàÔ∏è</emoji> <a href="tg://openmessage?user_id={user_id}"><b>{user_initials}</b></a>\n<emoji document_id=4918133202012340741>üë§</emoji> <code>@{user_id}</code>')

    async def —Ç–µ–≥cmd(self, message: Message):
        """–¢–µ–≥–∞–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –±–æ—Ç–æ–≤"""
        if not message.chat:
            await message.edit("<b>–û—à–∏–±–∫–∞!</b>")
            return

        chat = message.chat
        admins = await message.client.get_participants(chat, filter=ChannelParticipantsAdmins)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è –±–æ—Ç–æ–≤
        real_admins = [admin for admin in admins if not admin.bot]

        if not real_admins:
            await message.edit("<b>–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.</b>")
            return

        # –ü—Ä–æ—Å—Ç–æ —Ç–µ–≥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_mentions = [f"<a href='tg://user?id={admin.id}'>.</a>" for admin in real_admins]

        await message.edit(" ".join(admin_mentions))

    async def —Ö–µ–ª–øcmd(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        instruction = (
            "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            "–ö–æ–º–∞–Ω–¥–∞ <code>.–ª–æ–≥</code> –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∞–º–ø —á–∞—Ç–∞, —Å–æ–∑–¥–∞–≤–∞—è —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, "
            "–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ ¬´–ò–∑–±—Ä–∞–Ω–Ω–æ–µ¬ª. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —á–∞—Ç–∞.</b>"
        )

        sent_message = await self._client.send_message(message.chat_id, instruction)

        await asyncio.sleep(10)
        await sent_message.delete()
